# Makefile for Audio Processing Application
# 
# This Makefile handles both development and production environments:
# - Development: Creates symlinks to mirror Docker container structure for proper imports
# - Production: Each service installs only its required dependencies
#
# Key targets:
#   make dev     - Complete development setup (recommended for new developers)
#   make install - Production-style dependency installation
#   make clean   - Clean up build artifacts
#
.PHONY: all install dev install-dev setup-dev-env frontend backend microservices docker-up docker-down clean clean-dev test help

# Default target - production-style install
all: install

# === DEVELOPMENT SETUP ===
# Complete development environment setup - this is what new developers should run

# Install development dependencies (includes all service dependencies for IDE support)
dev: install-dev setup-dev-env

# Install all dependencies via hierarchical requirements for full IDE support
# This installs backend + microservices + all service-specific deps + dev tools
install-dev:
	pip install -r requirements.txt

# Setup development environment to mirror container structure
# This creates symlinks so imports work the same in development as in Docker containers
# 
# Problem: In containers, microservices/shared is copied to /app/microservices_shared
# Solution: Create symlink microservices_shared -> microservices/shared locally  
# Result: import microservices_shared.modules.* works in both dev and containers
setup-dev-env:
	@echo "Setting up development environment..."
	@# Create symlink to mirror Docker container structure for import resolution
	@if [ ! -L microservices_shared ]; then \
		ln -sf microservices/shared microservices_shared && \
		echo "Created symlink: microservices_shared -> microservices/shared"; \
	else \
		echo "Symlink microservices_shared already exists"; \
	fi

# === PRODUCTION-STYLE INSTALLATION ===
# Install dependencies separately (useful for testing production deployment locally)
install: frontend backend microservices

# Install frontend dependencies (Node.js/npm)
frontend:
	cd frontend && npm install

# Install backend dependencies only (Flask app)
# Uses hierarchical requirements: backend.txt -> base.txt  
backend:
	pip install -r backend/requirements.txt

# Install microservices dependencies for local testing
# Each service inherits from microservices.txt -> base.txt + adds service-specific deps
microservices:
	pip install -r microservices/librosa_service/requirements.txt
	pip install -r microservices/flucoma_service/requirements.txt

# === DOCKER OPERATIONS ===

# Start all containers with docker-compose (backend, microservices, databases)
# Each container builds with only its required dependencies for optimal image size
docker-up:
	docker-compose up --build

# Stop all running containers
docker-down:
	docker-compose down

# === CLEANUP OPERATIONS ===

# Clean up build artifacts and Python cache
# Removes node_modules, Python cache files, and test artifacts
clean:
	rm -rf frontend/node_modules
	find . -name "__pycache__" -type d -exec rm -rf {} +
	find . -name "*.pyc" -delete
	find . -name "*.pyo" -delete
	find . -name ".pytest_cache" -type d -exec rm -rf {} +

# Clean development environment (remove symlinks created by setup-dev-env)  
# Use this if you need to reset the development environment or before switching branches
clean-dev:
	@echo "Cleaning development environment..."
	@if [ -L microservices_shared ]; then \
		rm microservices_shared && \
		echo "Removed symlink: microservices_shared"; \
	fi

# === TESTING ===

# Run Python tests (requires development dependencies)
test:
	python -m pytest

# === HELP ===

# Display available targets and their descriptions
help:
	@echo "Available targets:"
	@echo ""
	@echo "=== DEVELOPMENT ==="
	@echo "  dev          - Complete development setup (install deps + create symlinks)"
	@echo "  setup-dev-env - Create symlinks to mirror container structure"
	@echo "  clean-dev    - Remove development symlinks"
	@echo ""
	@echo "=== INSTALLATION ==="
	@echo "  install      - Install production dependencies separately"
	@echo "  frontend     - Install frontend dependencies only"
	@echo "  backend      - Install backend dependencies only"  
	@echo "  microservices - Install microservices dependencies only"
	@echo ""
	@echo "=== DOCKER ==="
	@echo "  docker-up    - Start all containers with docker-compose"
	@echo "  docker-down  - Stop all containers"
	@echo ""
	@echo "=== MAINTENANCE ==="
	@echo "  clean        - Clean up build artifacts and Python cache"
	@echo "  test         - Run Python tests"
	@echo "  help         - Show this help message"
	@echo ""
	@echo "ðŸš€ Quick Start: 'make dev' for complete development setup"
